//*****************************************************************************
//
// blinky.c - Simple example to blink the on-board LED.
//
// Copyright (c) 2012-2020 Texas Instruments Incorporated.  All rights reserved.
// Software License Agreement
//
// Texas Instruments (TI) is supplying this software for use solely and
// exclusively on TI's microcontroller products. The software is owned by
// TI and/or its suppliers, and is protected under applicable copyright
// laws. You may not combine this software with "viral" open-source
// software in order to form a larger program.
//
// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
// DAMAGES, FOR ANY REASON WHATSOEVER.
//
// This is part of revision 2.2.0.295 of the EK-TM4C123GXL Firmware Package.
//
//*****************************************************************************

// --------------- Librerias ---------------
#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/systick.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/debug.h"
#include "driverlib/adc.h"

// --------------- Frecuencia ---------------
#define XTAL 16000000       // Establecer reloj a 16MHz

// --------------- Variables ---------------
int antirebote = 0; //bandera para antirebote
uint32_t i; //variable para delay
int valor; //Valor para leer estado del push button
int Sensor1 = 0; //Variable sensor1
int Sensor2 = 0; //Variable sensor2
int Sensor3 = 0; //Variable sensor3
int Sensor4 = 0; //Variable sensor4
int8_t spot1; //parqueo1
int8_t spot2; //Parqueo2
int8_t spot3; //Parqueo3
int8_t spot4; //Parqueo4
char disponibles; //disponobles


// --------------- Prototipos de Funciones ---------------
void setup(void); 
void delay1ms(void); //delay de 1ms
void delay(uint32_t msec); //Función para delay en ms
void setupUART1(void); //Función para el setup del UART1
void UART1_SendString(const char *str); //Función para enviar datos por el UART a la lcd
void UART1_SendInteger(int8_t num); //Función para LCD



int main(void)
{
    setup();
    setupUART1(); //Setup del UART1

    while(1){

        Sensor1 = GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_0); //Leemos el estado del sensor1
        Sensor2 = GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_1); //Leemos el estado del sensor2
        Sensor3 = GPIOPinRead(GPIO_PORTE_BASE, GPIO_PIN_4); //Leemos el estado del sensor3
        Sensor4 = GPIOPinRead(GPIO_PORTE_BASE, GPIO_PIN_5); //Leemos el estado del sensor4


        if(Sensor1 == 0){
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0, 0);
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_1, GPIO_PIN_1); //Enciende el led verde
            spot1 = 1;
        }
        else if(Sensor1 != 0){
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_1, 0); //Enciende el led verde
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0, GPIO_PIN_0);
            spot1 = 0;
        }

        if(Sensor2 == 0){
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_2, 0);
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_3, GPIO_PIN_3); //Enciende el led verde
            spot2 = 1;
        }
        else if(Sensor2 != 0){
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_3, 0); //Enciende el led verde
            GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_2, GPIO_PIN_2);
            spot2 = 0;
        }
        if(Sensor3 == 0){
            GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_1, 0);
            GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_2, GPIO_PIN_2); //Enciende el led verde
            spot3 = 1;
        }
        else if(Sensor3 != 0){
            GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_2, 0); //Enciende el led verde
            GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_1, GPIO_PIN_1);
            spot3 = 0;
        }

        if(Sensor4 == 0){
            GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_3, 0);
            GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, GPIO_PIN_6); //Enciende el led verde
            spot4 = 1;
        }
        else if(Sensor4 != 0){
            GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, 0); //Enciende el led verde
            GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_3, GPIO_PIN_3);
            spot4 = 0;
        }
        spot2 = spot2 << 1; //Mover bits
        spot3 = spot3 << 2; //Mover bits
        spot4 = spot4 << 3; //Mover bits
        disponibles = spot1 | spot2 | spot3 | spot4; //Realizar un OR para que cada bit represente un parqueo
        UARTCharPut(UART1_BASE, disponibles); //Enviar por UART1 al esp32

    }
}

void setup(void){
    SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ); //Reloj del sistema 80MHz
    //SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA|SYSCTL_PERIPH_GPIOB|SYSCTL_PERIPH_GPIOC|SYSCTL_PERIPH_GPIOD|SYSCTL_PERIPH_GPIOE|SYSCTL_PERIPH_GPIOF); //Habilitar el puerto A, B, C, D y E

    //PuertoA
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA); //Habilitar el puerto A, B, C, D y E
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA)); //Esperar a que se inicialice
    GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_5|GPIO_PIN_7); //Configuramos los pines de entrada del PuertoA
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6); //Configuramos los pines de salida del PuertoA

    //PuertoB
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB); //Habilitar el puerto A, B, C, D y E
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB)); //Esperar a que se inicialice
    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4); //Configuramos los pines de entrada del PuertoB
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_3); //Configuramos los pines de salida del PuertoB

    //PuertoC
    //GPIOPinTypeGPIOInput(GPIO_PORTC_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4); //Configuramos los pines de entrada del PuertoC
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC); //Habilitar el puerto A, B, C, D y E
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOC)); //Esperar a que se inicialice
    GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7); //Configuramos los pines de salida del PuertoC

    //PuertoD
    //GPIOPinTypeGPIOInput(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4); //Configuramos los pines de entrada del PuertoD
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD); //Habilitar el puerto A, B, C, D y E
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOD)); //Esperar a que se inicialice
    GPIOPinTypeGPIOOutput(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7); //Configuramos los pines de salida del PuertoD

    //PuertoE
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE); //Habilitar el puerto A, B, C, D y E
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOE)); //Esperar a que se inicialice
    GPIOPinTypeGPIOInput(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_5); //Configuramos los pines de entrada del PuertoE
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3); //Configuramos los pines de salida del PuertoE

    //PuertoF
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); //Habilitar el puerto F
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)); //Esperar a que se inicialice
        //GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4); //Configuramos el pin4 de F para el pusbutton
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3); //Definimos como salidas los pines de los leds

    //GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3); //Definimos como salidas los pines de los leds
    //GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU); //Configuramos el push1 como pullup
    //GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0); //Iniciamos con los led apagdos

    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0); //Iniciamos PuertoA apagado
    GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0); //Iniciamos PuertoB apagado
    GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0); //Iniciamos PuertoC apagado
    GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0); //Iniciamos PuertoD apagado
    GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0); //Iniciamos PuertoE apagado


    //GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU); //Configuramos el push1 como pullup
    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0); //Iniciamos con los led apagdos
}

void setupUART1(void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1); //Habilitar módulo UART1
    GPIOPinConfigure(GPIO_PC4_U1RX); //Definir pinB0 como RX
    GPIOPinConfigure(GPIO_PC5_U1TX); //Definir pinB1 como TX
    GPIOPinTypeUART(GPIO_PORTC_BASE, GPIO_PIN_4 | GPIO_PIN_5); //Habilitar los pines para el UART
    UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 115200, (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE)); //Setear el UART1 con 115200 de baudrate, de 8 bits
}

void UART0IntHandler(void){
    char cReceived;
    UARTIntClear(UART0_BASE, UART_INT_RX | UART_INT_RT); //Limpiar bandera de interrupción para recepción y transmisión
    while(UARTCharsAvail(UART0_BASE)) //Mientras haya algo disponible en el canal ejecutar
        {
            cReceived = UARTCharGetNonBlocking(UART0_BASE); //Guardar el dato en una variable
            UARTCharPutNonBlocking(UART0_BASE, cReceived); //Devuelve el dato recibido al transmisor
        }
}

void UART1IntHandler(void){
    UARTIntClear(UART1_BASE, UART_INT_RX | UART_INT_RT); //Limpiar bandera de interrupción para recepción y transmisión
    while(UARTCharsAvail(UART1_BASE)) //Mientras haya algo disponible en el canal ejecutar
        {
            //cReceived = UARTCharGetNonBlocking(UART1_BASE); //Guardar el dato en una variable
            UARTCharPutNonBlocking(UART1_BASE, disponibles); //Devuelve el dato recibido al transmisor
        }
}

void UART0_SendString(const char *str){
  //Enviar carácteres hasta que sea el caracter nulo '\0'
  while (*str) {
    //Esperar a que se envie
    while (!UARTCharPutNonBlocking(UART0_BASE, *str))
      ;

    //Mover al siguiente caracter
    str++;
  }
}

void UART0_SendInteger(int8_t num){
   //Convertir de entero a una cadena de caracteres
  char buf[20];
  sprintf(buf, "%ld", num);

  //Enviar el carácter
  UART0_SendString(buf);
}

void UART1_SendString(const char *str){
    //Enviar carácteres hasta que sea el caracter nulo '\0'
  while (*str) {
     //Esperar a que se envie
    while (!UARTCharPutNonBlocking(UART1_BASE, *str))
      ;

    //Mover al siguiente caracter
    str++;
  }
}

void UART1_SendInteger(int8_t num){
  //Convertir de entero a una cadena de caracteres
  char buf[20];
  sprintf(buf, "%ld", num);

  //Enviar la cadena por UART1
  UART1_SendString(buf);
}


//Rutina para generar el delay
void delay(uint32_t msec){
    for (i = 0; i < msec; i++){ //Ejecutar número de veces del argumento
        delay1ms(); //Llamar a función de 1ms
    }
}

void delay1ms(void){
    SysTickDisable(); //Deshabilitar el Sistick
    SysTickPeriodSet(40000-1); //Por aproximadamente 1ms
    SysTickEnable(); //Iniciar el set del periodo

    while((NVIC_ST_CTRL_R & NVIC_ST_CTRL_COUNT) == 0); //Mientras el bit de count sea 0 no hacer nada
}



